#!/usr/bin/env bash

# NOTE: This script requires PRJDIR variable to be set. This is typically done
#       in ~/.gtdrc. If you don't use this, then please set this variable in
#       ~/.bashrc or ~/.bash_profile to your zettelkasten directory.
if [[ -z "$PRJDIR" ]]; then
  source "$HOME/.gtdrc"
fi

ACTIVE_KEYWORDS=("TODO" "TASK" "NOTE" "REMINDER" "EVENT" "MEETING" "CALL" "EMAIL" "MESSAGE" "FOLLOWUP" "REVIEW" "CHECKIN" "CHECKOUT" "RESEARCH" "READING" "WRITING" "DRAFT" "EDITING" "FINALIZE" "SUBMIT" "PRESENTATION" "WAITING" "DEFERRED" "DELEGATED")
COMPLETED_KEYWORDS=("ARCHIVED" "CANCELED" "DELETED" "DONE" "COMPLETED" "CLOSED")
declare -A projects

main() {
	# Autocompletion
	# [[ ! -z "$COMP_LINE" ]] && _todo

	if [[ "$#" == "0" ]]; then # No subcommands => show only pending tasks
		SHOW_PENDING="false" todo ls | sed '/^$/d' | fzf --no-sort --tac --ansi --preview-window=up:60%:wrap --bind "ctrl-u:reload(SHOW_PENDING='false' todo ls | sed '/^$/d')" --bind 'enter:execute(note {1} edit {2})' --bind ctrl-h:up,ctrl-l:down #less -R ;;
	else # subcommands
		subcommand="$1"
		shift
		case "$subcommand" in
			# `ls` or `list` - List all tasks grouped by project
			ls|list) list "" ;;

			# `projects` - List all project directories and pending task count
			projects) summarize_projects --table ;;

			# 'projlist - Only print list of projects and tasks list.
			projlist) summarize_projects ;;

			*) # default - user passed a project name
			last_cmd="$1"
			case "$last_cmd" in
				ls|list) SHOW_PENDING="false" list "$subcommand" | sed '/^$/d' | fzf --no-sort --tac --ansi --preview-window=up:60%:wrap --bind "ctrl-u:reload(SHOW_PENDING='false' todo $subcommand | sed '/^$/d')" --bind 'enter:execute(note {1} edit {2})' --bind ctrl-h:up,ctrl-l:down ;;

				*) SHOW_PENDING="false" list "$subcommand" | sed '/^$/d' ;;
			esac
			;;
		esac
	fi
}

list() {
	local prj
	[[ "$1" == "" ]] && prj="*" || prj="$1"
	find "$PRJDIR" -path "$PRJDIR/$prj/notes/[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]/README.md" -type f | while read -r file; do
		process_file "$file"
	done
	echo ""
}


process_file() {
	local file output
	file="$1"
	output=$(grep -E '^[A-Z]+: .+( #[^ ]+)?( @[^ ]+)?( >> [^ ]+)?$' "$file")
	if [[ -n "$output" ]]; then
		local full_path z prj

		full_path=$(dirname "$file")
		# Get the project name. That is 2 directories up from `zet_dir`
		prj=$(dirname "$full_path")
		prj=$(basename "$(dirname "$prj")")
		z=$(basename "$full_path")
		echo "$output" | while IFS= read -r line; do
			process_line "$line" "$prj" "$z"
		done
	fi
}

process_line() {
	local project zettel line tag dt assignee title keyword
	local PRJ_COLOR ACTIVE_COLOR COMPLETED_COLOR TASK_COLOR TAG_COLOR DATE_COLOR ASSIGNEE_COLOR NORMAL

	line="$1"
	project="$2"
	zettel="$3"

	keyword=${line%%:*}
	# If keyword is not in the list of valid keywords, skip this entry
	if [[ ! "${ACTIVE_KEYWORDS[*]}" =~ $keyword && ! "${COMPLETED_KEYWORDS[*]}" =~ $keyword ]]; then
		return
	fi
	# Don't show completed tasks
	if [[ "$SHOW_PENDING" == "false" && "${COMPLETED_KEYWORDS[*]}" =~ $keyword ]]; then
		return
	fi
	title_atttribs=${line#*\: }
	title=${title_atttribs%% #*}
	title=${title%% @*}
	title=${title%% >>*}

	for word in $line; do
		case $word in
			\#*) tag=${word#\#} ;;
			\@*) dt=${word#\@} ;;
		esac
	done
	if [[ $line == *">>"* ]]; then
		assignee=${line#*">>"}
		assignee=$(echo "$assignee" | awk '{print $1}')
	fi

	PRJ_COLOR=$(tput setaf 11)
	ACTIVE_COLOR=$(tput setaf 13)
	COMPLETED_COLOR=$(tput setaf 10)
	TASK_COLOR=$(tput setaf 15)
	TAG_COLOR=$(tput setaf 0 ; tput setab 5)
	DATE_COLOR=$(tput setaf 1 ; tput setab 15)
	ASSIGNEE_COLOR=$(tput setaf 15 ; tput bold ; tput setab 4)
	NORMAL=$(tput sgr0)

	# Print the project name and the task
	printf "%s%s%s" "$PRJ_COLOR" "$project" "$NORMAL"
	# Print the zettel directory and the task
	printf " %s%s%s" "$PRJ_COLOR" "$zettel" "$NORMAL"
	if [[ "${ACTIVE_KEYWORDS[*]}" =~ $keyword ]]; then
		printf " %s%-12s%s" "$ACTIVE_COLOR" "$keyword" "$NORMAL"
	else
		printf " %s%-12s%s" "$COMPLETED_COLOR" "$keyword" "$NORMAL"
	fi
	printf " %s%s%s " "$TASK_COLOR" "$title" "$NORMAL"
	[[ -n "$tag" ]] && printf " %s %s %s " "$TAG_COLOR" "$tag" "$NORMAL"
	[[ -n "$dt" ]] && printf " %s %s %s " "$DATE_COLOR" "$dt" "$NORMAL"
	[[ -n "$assignee" ]] && printf " %s %s %s" "$ASSIGNEE_COLOR" "$assignee" "$NORMAL"
	printf "\n"
}

summarize_projects() {
	local maxlen
	maxlen=0
	while read -r file; do
		local prj count
		# Get the project name: 2 directories up from zettel's directory
		prj=$(basename "$(dirname "$(dirname  "$(dirname "$file")")")")
		[[ ${#prj} -gt $maxlen ]] && maxlen=${#prj}
		count=$(count_tasks "$file")
		projects["$prj"]=$(( ${projects["$prj"]:-0} + "$count" ))
	done < <(find "$PRJDIR" -path "$PRJDIR/*/notes/[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]/README.md" -type f)
	show_projects "$1" "$maxlen"
}

count_tasks() {
	local keywords
	keywords="$(IFS='|'; echo "${ACTIVE_KEYWORDS[*]}")"
	grep -c -E "^(${keywords}): .+( #[^ ]+)?( @[^ ]+)?( >> [^ ]+)?$" "$1"
}

show_projects() {
  if [[ "$1" == "--table" ]]; then
		tput smul && printf "\n%-${2}s" "Project" && tput rmul
		printf " " && tput smul && printf "Tasks\n" && tput rmul
	fi
	for key in $(printf "%s\n" "${!projects[@]}" | sort); do
		printf "%-${maxlen}s %5s\n" "$key" "${projects[$key]}"
	done
  if [[ "$1" == "--table" ]]; then
		echo ""
	fi
}

main "$@"
