#!/bin/bash

# NOTE: This script requires ZETDIR variable to be set. This is typically done
#       in ~/.gtdrc. If you don't use this, then please set this variable in 
#       ~/.bashrc or ~/.bash_profile to your zettelkasten directory.

if [[ -z "$ZETDIR" ]]; then
	# shellcheck disable=SC1091
	source "$HOME/.gtdrc"
fi

main() {
	if test -z "$ZETDIR" ; then
		echo "ERROR: No zettelkasten location set." 
		echo "Please set ZETDIR to absolute path of zettelkasten repository."
    exit 1
	fi

	preflight-checks

	# Autocompletion
	[[ -n "$COMP_LINE" ]] && _zet

	# Begin with latest update
	cd "$ZETDIR" || exit 1
	[ -d "$ZETDIR/.git" ] && git pull 1>/dev/null
	if [[ "$#" == "0" ]]; then # No subcommands => create a new zettel
		newzettel "$1"
	else # subcommands
		subcommand="$1"
		shift
		case "$subcommand" in
			# `?` - Search for specific string across all zettels
			\?)	shift 2; search "$@" | less --pattern="$*" -iR ;;

			# `d` or `todo` - Look for checklist items ("- [ ]") across all zettels
			d|todo) shift 2; search "\- \[ \]" | sed 's/\r$//g' | fzf --tac --ansi --preview-window=up:60%:wrap --preview 'echo {} | cut -d"[" -f1 | xargs -I {} batcmd --theme=gruvbox-dark --style=numbers,changes --color=always {}/README.md' --bind 'enter:execute(echo {} | cut -d"[" -f1 | xargs -I {} vim {}/README.md)' ;;

			# `t` or `title` - Search for specific string in title of each zettel
			t\?|title\?) shift 2; searchtitle "$@" | less --pattern="$*" -iR ;;

			# `e` or `edit` - Edit a specific zettel
			# If no zettel ID is provided, open fuzzy finder to select one and
			# edit.
			e|edit)
				if [[ -z "$1" ]]; then
					listzettels | sed 's/\r$//g' | fzf --tac --ansi --preview-window=up:60%:wrap --preview 'batcmd --theme=gruvbox-dark --style=changes --color=always {1}/README.md' --bind 'enter:execute(zet e {1})'
				else
					editzettel "$1"
				fi
			;;

			# `ls` or `list` - List all zettels. Shows the zettel ID and its title.
			ls|list) listzettels -c | less -R ;;

			# `show` - Dump the entire zettel's content to STDOUT
			show) printzettel "$1" ;;

			# `last` - Edit the zettel that was worked on most recently
			last)
				commit=$(git log --pretty=format:'%h' -n 1)
				zettel=$(git show --name-only --pretty="" "$commit")
				zettel=${zettel:0:14}
				echo "Editing last zettel: $zettel"
				editzettel "$zettel"
				;;

			# Catch all
			*) ;;
		esac
	fi
}

preflight-checks() {
	if [[ -z "$ZETDIR" ]]; then
	    echo "ERROR in repo path. Make sure there are no trailing spaces"
	    exit 1;
	elif [[ ! -d "$ZETDIR" ]]; then
	    echo "ERROR: Repository not present"
	    exit 1
	fi

	if [[ -z "$EDITOR" ]]; then
	    read -rp "No editor configured. Pick one - (vim, nano, emacs): " EDITOR
	fi
}

newzettel() {
	timestamp=$(exec date -u +%Y%m%d%H%M%S)
	echo "Creating zettel: $timestamp"

	cd "$ZETDIR" || exit 1

	if [[ -z "$1" ]]; then
		read -rp "Title: " title
	fi

	zettelpath="$timestamp"
	mkdir "$zettelpath"
	touch "$zettelpath/README.md"
	printf "# %s \n\n\n" "$title" >> "$zettelpath/README.md"
	$EDITOR "$zettelpath/README.md"
	title=$(head -n1 "$zettelpath/README.md" | sed "s/^# //")
	if [ -d "$ZETDIR/.git" ]; then
		git add "$zettelpath"/"README.md"
		git commit -m "$title"
		git push 2>/dev/null
	fi
}

search() {
	local MAGENTA YELLOW NORMAL
	MAGENTA=$(tput setaf 5)
	YELLOW=$(tput setaf 3)
	BOLD_ORANGE=$(tput bold; tput setaf 3)
	NORMAL=$(tput sgr0)

	cd "$ZETDIR" || exit 1

	current_title=""
	while read -r line; do
		zetid="${line:0:14}"
		title=$(head -n 1 "${zetid}/README.md")
		title=$(echo "${title:2}" | sed 's/\r//')
		remaining="${line:25}"
		local -a parts
		IFS=':'; read -r -a parts <<< "$remaining"; unset IFS;
		linenum="${parts[0]}"
		offset="$(( 26 + ${#linenum} ))"
		text="${line:$offset}"
		if [[ "$title" != "$current_title" ]]; then
			echo -e ""
			echo "${MAGENTA}$zetid: ${BOLD_ORANGE}$title${NORMAL}"
		fi
		echo "[${YELLOW}$linenum${NORMAL}]: $text"
		current_title="$title"
	done < <(grep --color -nri "$@" -- **/*.md)
}

searchtitle() {
	local search_pattern="^#.*$*.*"
	local MAGENTA NORMAL
  MAGENTA=$(tput setaf 5)
	NORMAL=$(tput sgr0)

	cd "$ZETDIR" || exit 1

	while read -r line; do
		zetid="${line:0:14}"
		title="${line:27}"
		echo "$MAGENTA$zetid$NORMAL: $title"
	done < <(grep -ri -e "$search_pattern" -- **/*.md)
	#grep -ri -e $search_pattern **/*.md | while read -r line; do echo "Processing $line"; done	
}

editzettel() {
	zettelpath="$ZETDIR/$1/README.md"
	title=$(head -n1 "$zettelpath" | sed "s/^# //")

	echo "EDITING: $title"
	"$EDITOR" "$zettelpath"
	
	if [ -d "$ZETDIR/.git" ]; then
		git add "$zettelpath"
		git commit -m "$title"
		git push 2>/dev/null
	fi
}

listzettels() {
	cd "$ZETDIR" || exit 1

	local MAGENTA NORMAL
	MAGENTA=$(tput setaf 5)
	NORMAL=$(tput sgr0)

	showcount="$1"

	lines=0
	for file in **/*.md 
	do
		title=$(head -n1 "$file" | sed -e "s/^# //")
		printf "%s${file:0:14}%s %s\n" "$MAGENTA" "$NORMAL" "$title"
		lines=$((lines+1))
	done
	if [[ "$showcount" == "-c" ]] ; then
		echo ""; echo "$lines zettels"
	fi
}

printzettel() {
	cd "$ZETDIR" || exit 1

	echo "" # Newline before showing contents
	tabs 2
	zettelpath="$1/README.md"
	cat "$zettelpath"
	tabs -8
	echo "" # Newline before dropping back to prompt
}

_zet() {
	IFS=' ' read -r -a COMP_WORDS <<< "$COMP_LINE"
	OPTIONS=("edit - or 'e' to edit a zettel"  "? - search for text across all zettels" "t? - or 'title?' to search for text across all zettel titles" "ls - or 'list' to list all zettels" "show - to print a zettel" "last - edit the last committed zettel" "todo - or 'd' to list all todos")
	# If no subcommand, then list all subcommands
  if [[ -z "${COMP_WORDS[1]}" ]]; then
		printf "%s\n\n" "${OPTIONS[@]}"
	else
		case "${COMP_WORDS[1]}" in
			e|edit)
				cd "$ZETDIR" || exit 1
				# Count the number of directories that match COMP_WORDS[2]
				count=$(find . -maxdepth 1 -type d -name "${COMP_WORDS[2]}*" | wc -l)
				if [[ "$count" -eq 1 ]]; then
					[[ -d "${COMP_WORDS[2]}" ]] && printf "" || printf "%s" "${COMP_WORDS[2]}"**
				elif [[ "$count" -gt 10 ]]; then
					for file in "${COMP_WORDS[2]}"**; do
						echo "${file:0:14}"
					done
				else
					for file in "${COMP_WORDS[2]}"**; do
						if [[ -d "$file" ]]; then
							title=$(head -n1 "$file/README.md" | sed -e "s/^# //")
							title="${title//$'\r'/}" # Trim carriage return
							echo "${file:0:14}: ${title}"
						fi
					done
				fi
				;;
		esac
	fi
}

main "$@"
